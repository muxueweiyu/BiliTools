# Git Commit 消息模板
# 遵循约定式提交规范 (Conventional Commits)

# 格式：<类型>[可选的作用域]: <描述>
# 
# [可选的正文]
# 
# [可选的脚注]

# 类型说明：
# feat:     新功能
# fix:      Bug 修复
# docs:     文档更新
# style:    代码格式化（不影响代码运行的变动）
# refactor: 代码重构（既不是新增功能，也不是修改 bug 的代码变动）
# perf:     性能优化
# test:     增加测试
# build:    构建系统或外部依赖的变动
# ci:       CI/CD 配置文件和脚本的变动
# chore:    其他不修改 src 或 test 文件的变动
# revert:   回滚之前的提交
# deps:     依赖更新
# config:   配置文件修改
# init:     初始化项目

# 作用域说明（可选）：
# frontend: 前端相关
# backend:  后端相关
# ui:       用户界面
# api:      API 相关
# auth:     认证相关
# config:   配置相关
# deps:     依赖相关
# build:    构建相关
# test:     测试相关
# docs:     文档相关

# 示例：
# feat(auth): 添加用户登录功能
# fix(ui): 修复按钮样式问题
# docs: 更新 README 文档
# deps: 更新 Vue 到 3.5.17
# config: 添加 pnpm 配置

# 破坏性变更：
# 如果有破坏性变更，在类型后面加上 !
# 例如：feat!: 重构用户认证系统

# 正文和脚注：
# 可以包含更详细的描述、变更原因、影响等
# 可以引用 issue 编号，如：关联 #123
